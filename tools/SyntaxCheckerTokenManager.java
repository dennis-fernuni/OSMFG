/* Generated By:JavaCC: Do not edit this line. SyntaxCheckerTokenManager.java */

/** Token Manager. */
public class SyntaxCheckerTokenManager implements SyntaxCheckerConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x100201000L) != 0L)
         {
            jjmatchedKind = 8;
            return 0;
         }
         return -1;
      case 1:
         if ((active0 & 0x100001000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0x100001000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x100000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 32:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 34:
         return jjStopAtPos(0, 11);
      case 40:
         return jjStopAtPos(0, 4);
      case 41:
         return jjStopAtPos(0, 5);
      case 42:
         return jjStopAtPos(0, 7);
      case 43:
         return jjStopAtPos(0, 6);
      case 45:
         return jjStopAtPos(0, 22);
      case 46:
         return jjStopAtPos(0, 25);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 48:
         jjmatchedKind = 8;
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 49:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 58:
         return jjStopAtPos(0, 24);
      case 60:
         return jjMoveStringLiteralDfa1_0(0xf0600L);
      case 62:
         return jjStopAtPos(0, 15);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 90:
         return jjStopAtPos(0, 31);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x403c08000000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x200000000000L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x800000000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4040000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0xa8000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x3000004000000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x8010000000000L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x160001000L);
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0x50000L);
      case 58:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      case 62:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         break;
      case 63:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80d0008000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xd0bc00000000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000020000L);
      case 111:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         return jjMoveStringLiteralDfa2_0(active0, 0x4020000000400L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x3200004000000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa3_0(active0, 0x160000000L);
      case 54:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(2, 12);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000080000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x104000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x200200002000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8018008000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000040000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x483c00000000L);
      case 115:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(2, 52);
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 57:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(3, 32);
         break;
      case 90:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(3, 29);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L);
      case 100:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(3, 41);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(3, 26);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(3, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x707c00000000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x3000000000000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L);
      case 107:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(3, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 108:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(3, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x600L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x44000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8010000L);
      case 122:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(3, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(4, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x403c00000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(4, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0x22000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000000000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(4, 45);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x900000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(5, 17);
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 62:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(5, 16);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x900000000000L);
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(5, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x200040000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x403c00000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x3000000004000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L);
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(5, 39);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(6, 18);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x3000000000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0xc03c00000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 61:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x3080000000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x403c00000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      case 107:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(7, 44);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x403c00000200L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x3000000000400L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L);
      case 121:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x403c00000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x3000000000400L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000002000L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(10, 13);
         break;
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L);
      case 100:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(10, 38);
         break;
      case 102:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000L);
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0x3000000000000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x200L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x403c00000000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L);
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(10, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000L);
      case 102:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x3000000000400L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x200L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x403c00000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa13_0(active0, 0x3c00000000L);
      case 61:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(12, 10);
         break;
      case 83:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000L);
      case 95:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000000L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x3000000000000L);
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x200L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa14_0(active0, 0x200L);
      case 72:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000L);
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000000L);
      case 100:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x3000000000000L);
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0x3000000000L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa15_0(active0, 0x200L);
      case 79:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000L);
      case 95:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000000L);
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000000L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x402000000000L);
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000L);
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0x3000000000000L);
      case 121:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa16_0(active0, 0x200L);
      case 58:
         return jjMoveStringLiteralDfa16_0(active0, 0x3000000000000L);
      case 84:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000L);
      case 95:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000000000L);
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000000L);
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000000L);
      case 104:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000000L);
      case 112:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000L);
      case 115:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000000L);
      case 117:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000L);
      case 46:
         return jjMoveStringLiteralDfa17_0(active0, 0x200L);
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000000L);
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000000L);
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000000L);
      case 109:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000L);
      case 110:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000000000L);
      case 115:
         return jjMoveStringLiteralDfa17_0(active0, 0x1800000000000L);
      case 118:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000000000L);
      case 121:
         return jjMoveStringLiteralDfa17_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa18_0(active0, 0x200L);
      case 61:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(17, 34);
         break;
      case 100:
         return jjMoveStringLiteralDfa18_0(active0, 0x200000000L);
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x2800000000000L);
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000000000L);
      case 114:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000000L);
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0x402000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa19_0(active0, 0x200L);
      case 50:
         return jjMoveStringLiteralDfa19_0(active0, 0x4000L);
      case 61:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(18, 46);
         break;
      case 98:
         return jjMoveStringLiteralDfa19_0(active0, 0x2000000000000L);
      case 103:
         return jjMoveStringLiteralDfa19_0(active0, 0x800000000000L);
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa19_0(active0, 0x200000000L);
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x800000000L);
      case 117:
         return jjMoveStringLiteralDfa19_0(active0, 0x1001000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa20_0(active0, 0x200L);
      case 54:
         return jjMoveStringLiteralDfa20_0(active0, 0x4000L);
      case 97:
         return jjMoveStringLiteralDfa20_0(active0, 0x200000000L);
      case 101:
         return jjMoveStringLiteralDfa20_0(active0, 0x800000000L);
      case 110:
         return jjMoveStringLiteralDfa20_0(active0, 0x1800000000000L);
      case 111:
         return jjMoveStringLiteralDfa20_0(active0, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa20_0(active0, 0x2001000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
static private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 53:
         return jjMoveStringLiteralDfa21_0(active0, 0x4000L);
      case 97:
         return jjMoveStringLiteralDfa21_0(active0, 0x2800000000000L);
      case 100:
         return jjMoveStringLiteralDfa21_0(active0, 0x1000000000000L);
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0x1000000200L);
      case 110:
         return jjMoveStringLiteralDfa21_0(active0, 0x2200000000L);
      case 114:
         return jjMoveStringLiteralDfa21_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
static private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 54:
         return jjMoveStringLiteralDfa22_0(active0, 0x4000L);
      case 61:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(21, 35);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(21, 36);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(21, 37);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(21, 48);
         break;
      case 108:
         return jjMoveStringLiteralDfa22_0(active0, 0x800000000000L);
      case 110:
         return jjMoveStringLiteralDfa22_0(active0, 0x200L);
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(21, 33);
         return jjMoveStringLiteralDfa22_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
static private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 52:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(22, 14);
         break;
      case 99:
         return jjMoveStringLiteralDfa23_0(active0, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa23_0(active0, 0x2000000000000L);
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(22, 47);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
static private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa24_0(active0, 0x2000000000200L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0);
}
static private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa25_0(active0, 0x200L);
      case 110:
         return jjMoveStringLiteralDfa25_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0);
}
static private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0);
      return 25;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(25, 49);
         break;
      case 105:
         return jjMoveStringLiteralDfa26_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0);
}
static private int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0);
      return 26;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa27_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0);
}
static private int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0);
      return 27;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa28_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0);
}
static private int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0);
      return 28;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa29_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0);
}
static private int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0);
      return 29;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa30_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0);
}
static private int jjMoveStringLiteralDfa30_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(28, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0);
      return 30;
   }
   switch(curChar)
   {
      case 85:
         return jjMoveStringLiteralDfa31_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(29, active0);
}
static private int jjMoveStringLiteralDfa31_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(29, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, active0);
      return 31;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa32_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(30, active0);
}
static private int jjMoveStringLiteralDfa32_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(30, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, active0);
      return 32;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa33_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(31, active0);
}
static private int jjMoveStringLiteralDfa33_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(31, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, active0);
      return 33;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa34_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(32, active0);
}
static private int jjMoveStringLiteralDfa34_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(32, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, active0);
      return 34;
   }
   switch(curChar)
   {
      case 56:
         return jjMoveStringLiteralDfa35_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(33, active0);
}
static private int jjMoveStringLiteralDfa35_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(33, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, active0);
      return 35;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa36_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(34, active0);
}
static private int jjMoveStringLiteralDfa36_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(34, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(35, active0);
      return 36;
   }
   switch(curChar)
   {
      case 63:
         return jjMoveStringLiteralDfa37_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(35, active0);
}
static private int jjMoveStringLiteralDfa37_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(35, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(36, active0);
      return 37;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(37, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(36, active0);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 8;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\50", "\51", "\53", "\52", null, 
"\74\77\170\155\154\40\166\145\162\163\151\157\156\75\47\61\56\60\47\40\145\156\143\157\144\151\156\147\75\47\125\124\106\55\70\47\77\76", "\74\157\163\155\40\166\145\162\163\151\157\156\75", "\42", "\60\56\66", 
"\40\147\145\156\145\162\141\164\157\162\75", 
"\117\163\155\157\163\151\163\40\123\116\101\120\123\110\117\124\55\162\62\66\65\66\64", "\76", "\74\57\157\163\155\76", "\74\156\157\144\145\40", 
"\74\57\156\157\144\145\76", "\74\164\141\147\40", "\57\76", "\60", "\55", "\124\72", "\72", "\56", 
"\164\162\165\145", "\146\141\154\163\145", "\40", "\101\56\56\132", "\141\56\56\172", "\132", 
"\61\56\56\71", 
"\145\155\145\162\147\145\156\143\171\75\146\151\162\145\137\150\171\144\162\141\156\164", "\146\151\162\145\137\150\171\144\162\141\156\164\72\164\171\160\145\75", 
"\146\151\162\145\137\150\171\144\162\141\156\164\72\144\151\141\155\145\164\145\162\75", 
"\146\151\162\145\137\150\171\144\162\141\156\164\72\160\162\145\141\163\165\162\145\75", 
"\146\151\162\145\137\150\171\144\162\141\156\164\72\160\157\163\151\164\151\157\156\75", "\165\156\144\145\162\147\162\157\165\156\144", "\160\151\154\154\141\162", 
"\167\141\154\154", "\160\157\156\144", "\154\141\156\145", 
"\160\141\162\153\151\156\147\137\154\157\164", "\163\151\144\145\167\141\154\153", "\147\162\145\145\156", 
"\146\151\162\145\137\150\171\144\162\141\156\164\137\143\157\165\156\164\75", 
"\150\151\147\150\167\141\171\75\164\162\141\146\146\151\143\137\163\151\147\156\141\154\163", 
"\164\162\141\146\146\151\143\137\163\151\147\156\141\154\163\72\163\157\165\156\144\75", 
"\164\162\141\146\146\151\143\137\163\151\147\156\141\154\163\72\166\151\142\162\141\164\151\157\156\75", "\154\157\143\141\164\145", "\167\141\154\153", "\171\145\163", "\156\157", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x3ffffffffffff1L, 
};
static final long[] jjtoSkip = {
   0xeL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[1];
static private final int[] jjstateSet = new int[2];
static protected char curChar;
/** Constructor. */
public SyntaxCheckerTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public SyntaxCheckerTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 1; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 13 && (0x2600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
